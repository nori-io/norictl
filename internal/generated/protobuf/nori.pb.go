// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nori.proto

package protoNori

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	plugin "github.com/nori-io/norictl/internal/generated/protobuf/plugin"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("nori.proto", fileDescriptor_05be84f81a338c15) }

var fileDescriptor_05be84f81a338c15 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x86, 0x3d, 0x48, 0xc1, 0x9c, 0x34, 0x5a, 0x0f, 0xeb, 0x17, 0xfa, 0x03, 0x56, 0xd0, 0x9f,
	0x20, 0xe2, 0x07, 0xb5, 0x2e, 0x5b, 0x7b, 0xf0, 0x18, 0xed, 0x58, 0x02, 0xd9, 0x24, 0x26, 0xb3,
	0x82, 0xbf, 0xdd, 0x8b, 0xec, 0xa6, 0xc9, 0x2a, 0x31, 0xc4, 0x9e, 0x02, 0x79, 0xde, 0x79, 0x60,
	0x5e, 0x86, 0x10, 0xa9, 0x0c, 0x2f, 0xb5, 0x51, 0xa8, 0xe8, 0x56, 0xff, 0x4c, 0x95, 0xe1, 0xc5,
	0x58, 0x8b, 0x76, 0xc9, 0xe5, 0x79, 0x03, 0xd6, 0xb2, 0x25, 0x58, 0x97, 0xb8, 0xf8, 0x1a, 0x91,
	0xcd, 0x8e, 0xd3, 0x5b, 0xb2, 0x5d, 0xf5, 0x89, 0x1b, 0xc0, 0x2b, 0xd5, 0x34, 0x4c, 0x2e, 0xe8,
	0x41, 0x19, 0xe6, 0xcb, 0x00, 0x6b, 0x78, 0x6f, 0xc1, 0x62, 0x31, 0xfe, 0x01, 0xaf, 0x8d, 0x51,
	0xa6, 0x06, 0x2d, 0x3e, 0xcf, 0x36, 0x68, 0x45, 0xf6, 0x5c, 0xf8, 0x4e, 0x5a, 0x64, 0x42, 0x78,
	0xdb, 0x49, 0x64, 0x5b, 0x05, 0xb2, 0xc6, 0x67, 0xb2, 0xef, 0x07, 0x10, 0xcc, 0x1b, 0x7b, 0x05,
	0xef, 0x3c, 0xfd, 0xc3, 0xb9, 0x8a, 0x78, 0x6b, 0x11, 0x45, 0x26, 0xdc, 0xa2, 0x57, 0x3f, 0x92,
	0x9d, 0xe1, 0xd3, 0x5b, 0x0f, 0x13, 0x23, 0x6b, 0x09, 0x1f, 0x00, 0x59, 0x5a, 0xd8, 0xd1, 0xb4,
	0xd0, 0x51, 0x27, 0xbc, 0xf7, 0xc2, 0xaa, 0x1d, 0xba, 0x8c, 0x85, 0x1d, 0xcd, 0x16, 0x39, 0x25,
	0xbb, 0x2e, 0x5d, 0x43, 0xa3, 0x3e, 0x42, 0x8b, 0xc7, 0x91, 0xcd, 0xf1, 0xac, 0x6f, 0x42, 0xa8,
	0xcb, 0xcf, 0x90, 0x99, 0x50, 0xdf, 0x51, 0xa4, 0xeb, 0x71, 0xd6, 0x16, 0x36, 0x9d, 0xa1, 0xd2,
	0xe9, 0x4d, 0x3b, 0x9a, 0x75, 0x3d, 0xf9, 0x93, 0x99, 0x4b, 0xfe, 0xfb, 0x0c, 0xe3, 0x93, 0x09,
	0x91, 0xff, 0xf7, 0x37, 0xd7, 0x42, 0xb1, 0x45, 0xba, 0x3f, 0xc7, 0x73, 0xbe, 0x97, 0x51, 0xff,
	0x7f, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x5a, 0xe3, 0x30, 0xb4, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoriClient is the client API for Nori service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoriClient interface {
	//plugin
	PluginGetCommand(ctx context.Context, in *plugin.PluginGetRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
	PluginInstallCommand(ctx context.Context, in *plugin.PluginInstallRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
	PluginInterfaceCommand(ctx context.Context, in *plugin.PluginInterfaceRequest, opts ...grpc.CallOption) (*plugin.PluginListReply, error)
	PluginListCommand(ctx context.Context, in *plugin.PluginListRequest, opts ...grpc.CallOption) (*plugin.PluginListReply, error)
	PluginMetaCommand(ctx context.Context, in *plugin.PluginMetaRequest, opts ...grpc.CallOption) (*plugin.PluginMetaReply, error)
	PluginPullCommand(ctx context.Context, in *plugin.PluginPullRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
	PluginRemoveCommand(ctx context.Context, in *plugin.PluginRemoveRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
	PluginStartCommand(ctx context.Context, in *plugin.PluginStartRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
	PluginStopCommand(ctx context.Context, in *plugin.PluginStopRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
	PluginUninstallCommand(ctx context.Context, in *plugin.PluginUninstallRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
	PluginUploadCommand(ctx context.Context, in *plugin.PluginUploadRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error)
}

type noriClient struct {
	cc *grpc.ClientConn
}

func NewNoriClient(cc *grpc.ClientConn) NoriClient {
	return &noriClient{cc}
}

func (c *noriClient) PluginGetCommand(ctx context.Context, in *plugin.PluginGetRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginGetCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginInstallCommand(ctx context.Context, in *plugin.PluginInstallRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginInstallCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginInterfaceCommand(ctx context.Context, in *plugin.PluginInterfaceRequest, opts ...grpc.CallOption) (*plugin.PluginListReply, error) {
	out := new(plugin.PluginListReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginInterfaceCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginListCommand(ctx context.Context, in *plugin.PluginListRequest, opts ...grpc.CallOption) (*plugin.PluginListReply, error) {
	out := new(plugin.PluginListReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginListCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginMetaCommand(ctx context.Context, in *plugin.PluginMetaRequest, opts ...grpc.CallOption) (*plugin.PluginMetaReply, error) {
	out := new(plugin.PluginMetaReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginMetaCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginPullCommand(ctx context.Context, in *plugin.PluginPullRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginPullCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginRemoveCommand(ctx context.Context, in *plugin.PluginRemoveRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginRemoveCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginStartCommand(ctx context.Context, in *plugin.PluginStartRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginStartCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginStopCommand(ctx context.Context, in *plugin.PluginStopRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginStopCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginUninstallCommand(ctx context.Context, in *plugin.PluginUninstallRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginUninstallCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noriClient) PluginUploadCommand(ctx context.Context, in *plugin.PluginUploadRequest, opts ...grpc.CallOption) (*plugin.ErrorReply, error) {
	out := new(plugin.ErrorReply)
	err := c.cc.Invoke(ctx, "/protoNori.Nori/PluginUploadCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoriServer is the server API for Nori service.
type NoriServer interface {
	//plugin
	PluginGetCommand(context.Context, *plugin.PluginGetRequest) (*plugin.ErrorReply, error)
	PluginInstallCommand(context.Context, *plugin.PluginInstallRequest) (*plugin.ErrorReply, error)
	PluginInterfaceCommand(context.Context, *plugin.PluginInterfaceRequest) (*plugin.PluginListReply, error)
	PluginListCommand(context.Context, *plugin.PluginListRequest) (*plugin.PluginListReply, error)
	PluginMetaCommand(context.Context, *plugin.PluginMetaRequest) (*plugin.PluginMetaReply, error)
	PluginPullCommand(context.Context, *plugin.PluginPullRequest) (*plugin.ErrorReply, error)
	PluginRemoveCommand(context.Context, *plugin.PluginRemoveRequest) (*plugin.ErrorReply, error)
	PluginStartCommand(context.Context, *plugin.PluginStartRequest) (*plugin.ErrorReply, error)
	PluginStopCommand(context.Context, *plugin.PluginStopRequest) (*plugin.ErrorReply, error)
	PluginUninstallCommand(context.Context, *plugin.PluginUninstallRequest) (*plugin.ErrorReply, error)
	PluginUploadCommand(context.Context, *plugin.PluginUploadRequest) (*plugin.ErrorReply, error)
}

// UnimplementedNoriServer can be embedded to have forward compatible implementations.
type UnimplementedNoriServer struct {
}

func (*UnimplementedNoriServer) PluginGetCommand(ctx context.Context, req *plugin.PluginGetRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginGetCommand not implemented")
}
func (*UnimplementedNoriServer) PluginInstallCommand(ctx context.Context, req *plugin.PluginInstallRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginInstallCommand not implemented")
}
func (*UnimplementedNoriServer) PluginInterfaceCommand(ctx context.Context, req *plugin.PluginInterfaceRequest) (*plugin.PluginListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginInterfaceCommand not implemented")
}
func (*UnimplementedNoriServer) PluginListCommand(ctx context.Context, req *plugin.PluginListRequest) (*plugin.PluginListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginListCommand not implemented")
}
func (*UnimplementedNoriServer) PluginMetaCommand(ctx context.Context, req *plugin.PluginMetaRequest) (*plugin.PluginMetaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginMetaCommand not implemented")
}
func (*UnimplementedNoriServer) PluginPullCommand(ctx context.Context, req *plugin.PluginPullRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginPullCommand not implemented")
}
func (*UnimplementedNoriServer) PluginRemoveCommand(ctx context.Context, req *plugin.PluginRemoveRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginRemoveCommand not implemented")
}
func (*UnimplementedNoriServer) PluginStartCommand(ctx context.Context, req *plugin.PluginStartRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginStartCommand not implemented")
}
func (*UnimplementedNoriServer) PluginStopCommand(ctx context.Context, req *plugin.PluginStopRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginStopCommand not implemented")
}
func (*UnimplementedNoriServer) PluginUninstallCommand(ctx context.Context, req *plugin.PluginUninstallRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginUninstallCommand not implemented")
}
func (*UnimplementedNoriServer) PluginUploadCommand(ctx context.Context, req *plugin.PluginUploadRequest) (*plugin.ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginUploadCommand not implemented")
}

func RegisterNoriServer(s *grpc.Server, srv NoriServer) {
	s.RegisterService(&_Nori_serviceDesc, srv)
}

func _Nori_PluginGetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginGetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginGetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginGetCommand(ctx, req.(*plugin.PluginGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginInstallCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginInstallCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginInstallCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginInstallCommand(ctx, req.(*plugin.PluginInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginInterfaceCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginInterfaceCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginInterfaceCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginInterfaceCommand(ctx, req.(*plugin.PluginInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginListCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginListCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginListCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginListCommand(ctx, req.(*plugin.PluginListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginMetaCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginMetaCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginMetaCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginMetaCommand(ctx, req.(*plugin.PluginMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginPullCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginPullCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginPullCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginPullCommand(ctx, req.(*plugin.PluginPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginRemoveCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginRemoveCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginRemoveCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginRemoveCommand(ctx, req.(*plugin.PluginRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginStartCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginStartCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginStartCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginStartCommand(ctx, req.(*plugin.PluginStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginStopCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginStopCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginStopCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginStopCommand(ctx, req.(*plugin.PluginStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginUninstallCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginUninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginUninstallCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginUninstallCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginUninstallCommand(ctx, req.(*plugin.PluginUninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nori_PluginUploadCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.PluginUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoriServer).PluginUploadCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNori.Nori/PluginUploadCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoriServer).PluginUploadCommand(ctx, req.(*plugin.PluginUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nori_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoNori.Nori",
	HandlerType: (*NoriServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginGetCommand",
			Handler:    _Nori_PluginGetCommand_Handler,
		},
		{
			MethodName: "PluginInstallCommand",
			Handler:    _Nori_PluginInstallCommand_Handler,
		},
		{
			MethodName: "PluginInterfaceCommand",
			Handler:    _Nori_PluginInterfaceCommand_Handler,
		},
		{
			MethodName: "PluginListCommand",
			Handler:    _Nori_PluginListCommand_Handler,
		},
		{
			MethodName: "PluginMetaCommand",
			Handler:    _Nori_PluginMetaCommand_Handler,
		},
		{
			MethodName: "PluginPullCommand",
			Handler:    _Nori_PluginPullCommand_Handler,
		},
		{
			MethodName: "PluginRemoveCommand",
			Handler:    _Nori_PluginRemoveCommand_Handler,
		},
		{
			MethodName: "PluginStartCommand",
			Handler:    _Nori_PluginStartCommand_Handler,
		},
		{
			MethodName: "PluginStopCommand",
			Handler:    _Nori_PluginStopCommand_Handler,
		},
		{
			MethodName: "PluginUninstallCommand",
			Handler:    _Nori_PluginUninstallCommand_Handler,
		},
		{
			MethodName: "PluginUploadCommand",
			Handler:    _Nori_PluginUploadCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nori.proto",
}
